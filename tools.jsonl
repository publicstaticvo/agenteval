{"name": "cactus/BrenkFilter", "description": "Used when you need to calculate whether a molecule triggers the Brenk Filter.", "inputs": "mol : rdkit.Chem.rdchem.Mol", "outputs": "bool True if the molecule triggers the Brenk filter, False otherwise. Notes The Brenk filter is described in: R. Brenk, et al., ChemMedChem, 2008, 3: 435-444. https://doi.org/10.1002/cmdc.200700139"}
{"name": "cactus/CalculateBBBPermeant", "description": "calculates the Blood Brain Barrier Permeability of the compound", "inputs": "compound_smiles : str", "outputs": "Boolean of whether the molecule is blood brain permeant or not. Notes The BOILED-Egg model is described in: A. Daina and V. Zoete, ChemMedChem 2016, 11, 1117. https:/doi.org/10.1002/cmdc.201600182"}
{"name": "cactus/calculate_druglikeness", "description": "calculates the druglikeness of the compound with regards to Lipinski's rule of 5", "inputs": "compound_smiles : str", "outputs": "Union[str, dict[str, str]] Notes The Lipinksi Rule of 5 is described in: C.A Lipinksi, et al. Adv. Drug Delivery Rev. 2001, 46, 1-3, 3-26 https://doi.org/10.1016/S0169-409X(00)00129-0"}
{"name": "cactus/calculate_gi_absorption", "description": "returns whether the gastrointestinal absorption is high or low", "inputs": "compound_smiles : str", "outputs": "string of whether the gastrointestinal absorption is 'high' or 'low' Notes The BOILED-Egg model is described in: A. Daina and V. Zoete, ChemMedChem 2016, 11, 1117. https:/doi.org/10.1002/cmdc.201600182"}
{"name": "cactus/CalculateLogP", "description": "Use this tool when you need to calculate the log of the partition coefficient (LogP) of a compound.", "inputs": "compound_smiles: Compound in SMILES format", "outputs": "float: Wildman-Crippen LogP value"}
{"name": "cactus/CalculateMolecularWeight", "description": "Use this tool when you need to calculate the molecular weight of a SMILES string. Units in Dalton.", "inputs": "compound: Compound in SMILES format", "outputs": "float: The exact molecular weight in daltons"}
{"name": "cactus/CalculateQED", "description": "Compute Quantitative Estimate of Druglikeness (QED) of the given molecule", "inputs": "compound: Compound in SMILES format", "outputs": "float: The QED from 0 (druglike) to 1 (not)"}
{"name": "cactus/CalculateSA", "description": "Used to compute the synthetic accessibility (SA) of the given molecule.", "inputs": "compound: Compound in SMILES format", "outputs": "float: The SA between 1 (easy) and 10 (hard)"}
{"name": "cactus/CalculateTPSA", "description": "Compute the Topological polar surface area (TPSA) of the given molecule.", "inputs": "compound: Compound in SMILES format", "outputs": "float: The TPSA in angstroms^2"}
{"name": "cactus/CasToSMILES", "description": "Convert the input cas into its corresponding SMILES notation", "inputs": "input_query (str): The cas number of the chemical compound.", "outputs": "str: The SMILES notation in the output format."}
{"name": "cactus/ChemblidToSMILES", "description": "Convert the input chemblid into its corresponding SMILES notation", "inputs": "input_id (str): The ChEMBL database id of the chemical compound.", "outputs": "str: The SMILES notation in the output format."}
{"name": "cactus/CidToSMILES", "description": "Convert the input Pubchem id into its corresponding SMILES notation", "inputs": "input_id (str): The PubChem id of the chemical compound.", "outputs": "str: The SMILES notation in the output format."}
{"name": "cactus/InchikeyToSMILES", "description": "Use this tool when you need to convert a molecule's inchikey\nto it's corresponding SMILES string.\n\nExamples of InchiKeys:\n- HUMNYLRZRPPJDN-UHFFFAOYSA-N\n- BJKAKPMCBYMRJI-UHFFFAOYSA-N\n- ZRSNZINYAWTAHE-UHFFFAOYSA-N", "inputs": "input_name (str): The InchIkey of the chemical compound.", "outputs": "str: The SMILES notation in the output format."}
{"name": "cactus/MolecularFormulaToSMILES", "description": "Use this tool when you need to convert a chemical formula into a SMILES string.\n\nA chemical formula is a sequence of atomic symbols and/or numeric subscripts that represents the\ncomposition of a compound.\n\nAn example of a chemical formula is C6H12O6 or CH4\n\nOnly accept input that appears in this format.", "inputs": "input_formula (str): The molecular formula of the chemical compound.", "outputs": "str: The SMILES notation in the output format."}
{"name": "cactus/CommonNameToSMILES", "description": "Use this tool when you need to convert a molecule's common name to it's corresponding SMILES string.\n\nA common name could look like this: Acetate, Sulfate, Alkene, Benzene.\n\nMost generic searches will be in this format.", "inputs": "input_name (str): The name of the chemical compound.", "outputs": "str: The SMILES notation in the output format."}
{"name": "cactus/PainsFilter", "description": "Used when you need to calculate whether a molecule triggers the PAINS Filter.", "inputs": "compound_smiles : str", "outputs": "bool True if the molecule triggers the PAINS filter, False otherwise. Notes The PAINS filter is described in: J.B. Baell and G.A. Holloway, J. Med. Chem. 2010, 53, 7, 2719â€“2740 https://doi.org/10.1021/jm901137j"}
{"name": "cactus/zinc_id_to_SMILES", "description": "Convert the input zinc id into its corresponding SMILES notation", "inputs": "input_id (str): The ZINC15 id of the chemical compound.", "outputs": "str: The SMILES notation in the output format."}
{"name": "chemcrow/Name2SMILES", "description": "Converts a chemical name to its SMILES representation.", "inputs": "name (str): The chemical name.", "outputs": "smiles (str): The SMILES string."}
{"name": "chemcrow/SMILES2Name", "description": "Converts a SMILES string to its chemical name.", "inputs": "smiles (str): The SMILES string.", "outputs": "name (str): The chemical name."}
{"name": "chemcrow/MolFromSmiles", "description": "Creates an RDKit molecule object from a SMILES string.", "inputs": "smiles (str): The SMILES string.", "outputs": "mol (rdkit.Chem.rdchem.Mol): The molecule object."}
{"name": "chemcrow/MolToMolBlock", "description": "Get the Mol block from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "mol_block (str): The Mol block of the molecule."}
{"name": "chemcrow/GetMolWT", "description": "Get the molecular weight of a molecule from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "molecular_weight (float): The molecular weight of the molecule."}
{"name": "chemcrow/GetHBA", "description": "Get the number of hydrogen bond acceptors of a molecule from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "hba (int): The number of hydrogen bond acceptors."}
{"name": "chemcrow/GetHBD", "description": "Get the number of hydrogen bond donors of a molecule from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "hbd (int): The number of hydrogen bond donors."}
{"name": "chemcrow/GetNumRotatableBonds", "description": "Get the number of rotatable bonds of a molecule from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "rotatable_bonds (int): The number of rotatable bonds."}
{"name": "chemcrow/GetTPSA", "description": "Get the topological polar surface area of a molecule from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "tpsa (float): The topological polar surface area."}
{"name": "chemcrow/GetLogP", "description": "Get the logP of a molecule from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "logp (float): The logP of the molecule."}
{"name": "chemcrow/GetMorganFingerprint", "description": "Get the Morgan fingerprint of a molecule from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "fingerprint (numpy.ndarray): The Morgan fingerprint."}
{"name": "chemcrow/TanimotoSimilarity", "description": "Calculate the Tanimoto similarity between two molecules from their SMILES strings.", "inputs": "smiles1 (str): The SMILES string of the first molecule.\r\tsmiles2 (str): The SMILES string of the second molecule.", "outputs": "similarity (float): The Tanimoto similarity."}
{"name": "chemcrow/FindSubstructure", "description": "Find if a molecule contains a substructure.", "inputs": "smiles (str): The SMILES string of the molecule.\r\tsubstructure_smiles (str): The SMILES string of the substructure.", "outputs": "has_substructure (bool): Whether the molecule contains the substructure."}
{"name": "chemcrow/RXNPredict", "description": "Predict the product of a reaction from the SMILES strings of the reactants.", "inputs": "reactants_smiles (str): The SMILES strings of the reactants, separated by a dot.", "outputs": "product_smiles (str): The SMILES string of the product."}
{"name": "chemcrow/Retrosynthesis", "description": "Perform retrosynthesis on a molecule to find possible reactants.", "inputs": "product_smiles (str): The SMILES string of the product.", "outputs": "reactants_smiles (list): A list of possible reactant SMILES strings."}
{"name": "chemlib/judge_the_balance_of_reaction", "description": "Judge whether the reaction formula is balanced.", "inputs": "reaction_formula: str, a string representing the reaction formula.", "outputs": "Is_Balanced: bool, whether the formula is balanced."}
{"name": "chemlib/reactant_formulas_of_reaction", "description": "Get reactant formulas of the reaction.", "inputs": "reaction_formula: str, a string representing the reaction formula.", "outputs": "Reactant_Formulas: list, the reactant formulas."}
{"name": "chemlib/product_formulas_of_reaction", "description": "Get product formulas of the reaction.", "inputs": "reaction_formula: str, a string representing the reaction formula.", "outputs": "Product_Formulas: list, the product formulas."}
{"name": "chemlib/combustion_reactions", "description": "Create and balance a combustion reaction for a given compound.", "inputs": "compound: str, the molecular formula of the compound to combust.", "outputs": "Is_Balanced: bool, whether the formula is balanced."}
{"name": "chemlib/balance_the_reaction", "description": "Balance the chemical reaction.", "inputs": "reaction_formula: str, a string representing the reaction formula.", "outputs": "Product_Formulas: list, the product formulas."}
{"name": "chemlib/reaction_stoichiometry_amounts", "description": "Get stoichiometric amounts of all compounds in the reaction given the amount of one compound.", "inputs": "reaction_formula: str, the reaction formula string.\tcompound_number: int, the chosen compound in the reaction by order of appearance (left to right).\tunit: Literal[\"grams\", \"moles\", \"molecules\"], given stoichiometry amount.\tamount: float, the amount of the chosen compound.", "outputs": "ValueError: if more than one argument is given under kwargs."}
{"name": "chemlib/limiting_reagent_of_reaction", "description": "Determine the limiting reagent in a chemical reaction.", "inputs": "reaction_formula: str, the reaction formula string.\tmode: list, the units of each amount in args. Default is grams, can also be moles or molecules.\trectant_amount_list: list, the amounts of each reactant to use in the chemical reaction.", "outputs": "ValueError: If the mode is not grams, moles, or molecules."}
{"name": "chemlib/galvanic_cell_properties", "description": "Create a Galvanic (Voltaic) Cell with the given electrodes and return its properties.", "inputs": "element_electrode1: str, the elemental composition of one of the electrodes.\telement_electrode2: str, the elemental composition of the other electrode.", "outputs": "NotImplementedError: If either of the electrodes is invalid or its reduction potential is unknown."}
{"name": "chemlib/galvanic_cell_potential", "description": "Create a Galvanic (Voltaic) Cell with the given electrodes and return its potential.", "inputs": "element_electrode1: str, the elemental composition of one of the electrodes.\telement_electrode2: str, the elemental composition of the other electrode.", "outputs": "NotImplementedError: If either of the electrodes is invalid or its reduction potential is unknown."}
{"name": "chemlib/perform_electrolysis", "description": "Perform electrolysis calculations given an element, the moles of electrons transferred, and two of the following: current (amps), time (seconds), or mass (grams).", "inputs": "element: str, the symbol of a chemical element.\tn: int, the moles of electrons transferred.\tgrams: float, mass of the meterial.\tseconds: float, time of electrolysis.", "outputs": "TypeError: If not only 2 of the parameters in kwargs are specified."}
{"name": "chemlib/get_empirical_formula_by_percent_composition", "description": "Calculate the empirical formula of a compound based on the given percentage compositions of elements.", "inputs": "percent_composition: dict, keyword arguments representing the percentage compositions of elements in the compound (e.g., {'C'=80.6, 'H'=19.4}).", "outputs": "ValueError: If the sum of the percentages is not equal to 100."}
{"name": "chemlib/analyze_combustion", "description": "Get the empirical formula of a hydrocarbon given the grams of CO2 and grams of H2O formed from its combustion.", "inputs": "CO2: float, the grams of carbon dioxide formed as a result of the combustion of the hydrocarbon.\tH2O: float, the grams of water formed as a result of the combustion of the hydrocarbon.", "outputs": "compound_unicode: str, the empirical formula of the hydrocarbon."}
{"name": "chemlib/acidity_calculation", "description": "For any inputted pH, pOH, [H+], or [OH-], finds the corresponding values.", "inputs": "pH: The value of the chosen input (pH=, pOH=, H=, or OH=).", "outputs": "acidity: dict, PH value."}
{"name": "chemlib/make_solution_by_grams_per_liter", "description": "Given grams of solute per liter. Return the molarity of the solution.", "inputs": "compound: str, the formula of the solute compound.\tgrams: float, how many grams of solute.\tliters: float, how many liters of solution.", "outputs": "molarity: float, the molarity of the solution."}
{"name": "chemlib/electromagnetic_wave_by_wavelength", "description": "Get the properties of the wave based on the wavelength.", "inputs": "wavelength: float, wavelength of the wave.", "outputs": "properties: dict, properties of the wave (wavelength, frequency, energy)."}
{"name": "chemlib/electromagnetic_wave_by_frequency", "description": "Get the properties of the wave based on the frequency.", "inputs": "frequency: float, frequency of the wave.", "outputs": "properties: dict, properties of the wave (wavelength, frequency, energy)."}
{"name": "chemlib/electromagnetic_wave_by_energy", "description": "Get the properties of the wave based on the energy.", "inputs": "energy: float, energy of the wave.", "outputs": "properties: dict, properties of the wave (wavelength, frequency, energy)."}
{"name": "chemlib/electromagnetic_wave_by_rydberg_equation", "description": "Get the properties of the wave based on the Rydberg equation for a given element and orbitals.", "inputs": "element: str, the symbol of the element. For example, \"H\"\tn1: int, initial orbital number.\tn2: int, final orbital number (must be greater than n1).", "outputs": "ValueError: If n2 is not greater than n1."}
{"name": "chemlib/energy_of_hydrogen_orbital", "description": "Calculate the energy of an electron in the nth orbital of the Hydrogen atom in Joules.", "inputs": "n: int, the orbital number (1 for the first orbital, 2 for the second, etc.).", "outputs": "energy: float, Energy of the electron in Joules."}
{"name": "chemlib/calculate_element_frequencies_in_compound", "description": "Calculate the frequencies of the constituent elements in the compound.", "inputs": "compound: str, compound molecular formula in the string format.", "outputs": "element_frequencies: dict, the frequencies of the constituent elements in the compound."}
{"name": "chemlib/calculate_compound_molar_mass", "description": "Calculate the molar mass in (g/mol) of the compound.", "inputs": "compound: str, compound molecular formula in the string format.", "outputs": "molar_mass: float, the molar mass in (g/mol) of the compound."}
{"name": "chemlib/calculate_compound_percentage_composition_by_mass", "description": "Get the percentage composition by mass of a certain element of the compound.", "inputs": "compound: str, compound molecular formula in the string format.\telement: str, the constituent element of which the user wants to get percentage composition.", "outputs": "element_percentage_compostion: float, the percentage composition by mass of the element in the compound."}
{"name": "chemlib/convert_compound_stoichiometry_amount", "description": "Get stoichiometric amounts of the compound given one measurement.", "inputs": "compound: str, compound molecular formula in the string format.\tunit: Literal[\"grams\", \"moles\", \"molecules\"], given stoichiometry amount.\tamount: float, the amount of the chosen compound.", "outputs": "compound_stoichiometry_amount: dict, the percentage composition by mass of the element in the compound."}
{"name": "chemlib/get_element_properties", "description": "Get all the properties of the given element, including its atomic number, name, symbol, atomic mass, neutrons, protons, electrons, period, group, phase, whether it's radioactive, whether it's natural, whether it's a metal, nonmetal or metalloid, type, atomic radius, electronegativity, first ionization energy, density, melting point, boiling point, isotopes, discoverer, year of discovery, specific heat, shells, valence, electron configuration, and mass number.", "inputs": "element: str, the atomic symbol of an element.", "outputs": "MassNumber: float, the mass number of the element."}
{"name": "chemistrytools/convert_compound_CID_to_SMILES", "description": "Retrieve the Canonical SMILES representation of a chemical compound using its PubChem Compound Identifier (CID).", "inputs": "compound_CID: int, the PubChem Compound Identifier (CID) of the chemical compound.", "outputs": "compound_SMILES: str, the Canonical SMILES representation of the chemical compound."}
{"name": "chemistrytools/compound_string_to_html", "description": "Convert a chemical formula string to its HTML representation.", "inputs": "compound: str, compound molecular formula in the string format.", "outputs": "html: str, the HTML representation of the chemical formula."}
{"name": "chemistrytools/calculate_spectrum_similarity", "description": "Calculate spectrum similarity score between two spectra.", "inputs": "mz_top : list, List of m/z values for the top spectrum.\tintensities_top : list, List of intensity values corresponding to mz_top.\tmz_bottom : list, List of m/z values for the bottom spectrum.\tintensities_bottom : list, List of intensity values corresponding to mz_bottom.", "outputs": "score_2: float, Similarity score of spectra_bottom to spectra_top."}
{"name": "chemistrytools/get_compound_MolecularWeight_by_CID", "description": "Retrieve the molecular weight (molecular mass) of a chemical compound using its PubChem Compound Identifier (CID).", "inputs": "compound_CID: int, the PubChem Compound Identifier (CID) of the chemical compound.", "outputs": "molecular_weight: float, the molecular weight (molecular mass) of the chemical compound."}
{"name": "chemistrytools/get_element_information", "description": "Calculate information about the given element, including its atomic number, symbol, name, atomic mass, description, electron configuration, and electron configuration dictionary.", "inputs": "element: a str, the atomic symbol of an element.", "outputs": "eleconfig_dict: dict, the electron configuration in dictionary form."}
{"name": "chemistrytools/calculate_compound_molar_mass", "description": "Calculate the molar mass of a given chemical formula.", "inputs": "compound: str, compound molecular formula in the string format.", "outputs": "mass: float, the molar mass of the chemical formula."}
{"name": "chemistrytools/compound_string_to_unicode", "description": "Convert a chemical formula string to its Unicode representation.", "inputs": "compound: str, compound molecular formula in the string format.", "outputs": "unicode: str, the Unicode representation of the chemical formula."}
{"name": "chemistrytools/convert_compound_CID_to_Molecular_Formula", "description": "Retrieve the molecular formula of a chemical compound using its PubChem Compound Identifier (CID).", "inputs": "compound_CID: int, the PubChem Compound Identifier (CID) of the chemical compound.", "outputs": "compound: str, the molecular formula of the chemical compound."}
{"name": "chemistrytools/get_compound_CID", "description": "Retrieve the PubChem Compound Identifier (CID) for a given chemical name.", "inputs": "compound: str, compound name in the string format.", "outputs": "compound_CID: int, the PubChem Compound Identifier (CID) of the chemical compound."}
{"name": "chemistrytools/compound_string_to_latex", "description": "Convert a chemical formula string to its LaTeX representation.", "inputs": "compound: str, compound molecular formula in the string format.", "outputs": "latex: str, the LaTeX representation of the chemical formula."}
{"name": "chemistrytools/convert_compound_CID_to_IUPAC", "description": "Retrieve the IUPAC name of a chemical compound using its PubChem Compound Identifier (CID).", "inputs": "compound_CID: int, the PubChem Compound Identifier (CID) of the chemical compound.", "outputs": "iupac_name: str, the IUPAC name of the chemical compound."}
{"name": "chemistrytools/get_constants", "description": "Retrieve the value, unit, and symbol of a physical constant by its name.", "inputs": "name: str, the name of the physical constant (e.g., 'avogadro_number', 'boltzmann_constant').", "outputs": "symbol: str, the symbol or abbreviation of the constant."}
{"name": "chemistrytools/get_compound_charge_by_CID", "description": "Retrieve the charge of a chemical compound using its PubChem Compound Identifier (CID).", "inputs": "compound_CID: int, the PubChem Compound Identifier (CID) of the chemical compound.", "outputs": "charge: int, the charge of the chemical compound."}
{"name": "scitooleval/NameToSMILES", "description": "Query a molecule name and return its SMILES string in Markdown format.", "inputs": "molecule_name (str): The name of the molecule to query.", "outputs": "str: A Markdown formatted string containing the molecule's SMILES and additional information."}
{"name": "scitooleval/NameToCas", "description": "Query a molecule name and return its SMILES string in Markdown format.", "inputs": "molecule_name (str)", "outputs": "str"}
{"name": "scitooleval/RXNPredict", "description": "Predict the outcome of a chemical reaction and return the result in Markdown format.", "inputs": "reactants (str): The SMILES string of the reactants separated by a dot '.'.", "outputs": "str: A Markdown formatted string containing the reaction prediction."}
{"name": "scitooleval/RXNRetrosynthetic", "description": "Predicts a retrosynthetic pathway for a product SMILES and returns the first pathway with detailed SMILES for each step", "inputs": "product (str): The SMILES string of the product.", "outputs": "str: A Markdown formatted string containing the first retrosynthetic pathway and reactions details."}
{"name": "scitooleval/RXNPredictProperties", "description": "Predicts reaction properties such as atom-to-atom mapping and reaction yield for a single reaction SMILES string.", "inputs": "reaction (str): A reaction SMILES string.", "outputs": "str: A Markdown formatted string containing predicted properties."}
{"name": "scitooleval/SMILESToWeight", "description": "Calculate the molecular weight of a molecule given its SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "str: A Markdown formatted string containing the molecular weight."}
{"name": "scitooleval/MolSimilarity", "description": "Calculate the Tanimoto similarity between two molecules given their SMILES strings.", "inputs": "smiles_pair (str): Two SMILES strings separated by a dot '.'.", "outputs": "str: A Markdown formatted string containing the similarity result."}
{"name": "scitooleval/FuncGroups", "description": "Identify and list the functional groups in a molecule given its SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "str: A Markdown formatted string listing the functional groups."}
{"name": "scitooleval/SafetySummary", "description": "Returns a summary of safety information for a given CAS number.The summary includes Operator safety, GHS information,Environmental risks, and Societal impact.", "inputs": "cas (str): The CAS number of the molecule.", "outputs": "str: A Markdown formatted string containing the safety summary."}
{"name": "scitooleval/CheckPatent", "description": "Returns a summary of safety information for a given CAS number.The summary includes Operator safety, GHS information,Environmental risks, and Societal impact.", "inputs": "smiles (str)", "outputs": "str"}
{"name": "scitooleval/CheckExplosiveness", "description": "Checks if a molecule with the given CAS number is explosive.", "inputs": "cas_number (str): The CAS number of the molecule.", "outputs": "str: A Markdown formatted string indicating whether the molecule is explosive."}
{"name": "scitooleval/SmilesToPdb", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "smiles (str): The SMILES of the compound.", "outputs": "str: The Markdown content with SMILES to 3D structures."}
{"name": "scitooleval/SMILESToInChI", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "smiles (str)", "outputs": "str"}
{"name": "scitooleval/InChIKeyToSMILES", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "inchikey (str)", "outputs": "str"}
{"name": "scitooleval/InChIKeyToInChI", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "inchikey (str)", "outputs": "str"}
{"name": "scitooleval/InChIKeyToMOL", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "inchikey (str)", "outputs": "str"}
{"name": "scitooleval/IsValidInChIKey", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "inchikey (str)", "outputs": "str"}
{"name": "scitooleval/InChIToSMILES", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "inchi (str)", "outputs": "str"}
{"name": "scitooleval/InChIToInChIKey", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "inchi (str)", "outputs": "str"}
{"name": "scitooleval/InChIToCSID", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "inchi (str)", "outputs": "str"}
{"name": "scitooleval/SMILEStoSELFIES", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "smiles (str)", "outputs": "str"}
{"name": "scitooleval/SELFIEStoSMILES", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "selfies (str)", "outputs": "str"}
{"name": "scitooleval/RandomMoelcule", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "length (str)", "outputs": "str"}
{"name": "scitooleval/Length_SELFIES", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "selfies (str)", "outputs": "str"}
{"name": "scitooleval/Split_SELFIES", "description": "Convert the SMILES of the compound into 3D structures and return them in Markdown format.", "inputs": "selfies (str)", "outputs": "str"}
{"name": "scitooleval/ExplainAtomPairScore", "description": "Explain the pair score for a directly connected atom pair in a molecule.", "inputs": "molecule (str): SMILES representation of the molecule.\t        atom_idx1 (int): Index of the first atom.\t        atom_idx2 (int): Index of the second atom.", "outputs": "str: A Markdown string explaining the pair score, or an error message."}
{"name": "scitooleval/GetAtomPairFingerprintAsBitVect", "description": "Generate the atom pair fingerprint of a molecule as a SparseBitVect. \n    This fingerprint represents the presence of atom pairs, not just their counts.", "inputs": "molecule (str): SMILES representation of the molecule.", "outputs": "str: Markdown formatted string of the bit vector fingerprint, or an error message."}
{"name": "scitooleval/AssignPattyTypes", "description": "Assign Patty types to the atoms of a molecule.", "inputs": "molecule (Mol): RDKit molecule object.", "outputs": "str: Markdown formatted string listing the Patty types of each atom, or an error message."}
{"name": "scitooleval/ExplainAtomCode", "description": "Explain the code for a specific atom in a molecule, including chirality by default.", "inputs": "molecule (str): SMILES representation of the molecule.\t        atom_idx (int): Index of the atom to explain.\t        include_chirality (bool): Whether to include chirality in the explanation. Default is True.", "outputs": "str: Markdown formatted string explaining the atom code, or an error message."}
{"name": "scitooleval/TestMolecule", "description": "Perform a series of tests on a molecule, including sanitization, removal of hydrogens,\n    and canonicalization check. This function helps in validating the molecule's structure \n    and consistency.", "inputs": "smiles (str): SMILES representation of the molecule.", "outputs": "str: A string summarizing the test results. Returns 'Valid and consistent molecule structure.'\n        if tests are passed, otherwise provides an error code indicating the type of issue encountered."}
{"name": "scitooleval/ConvertSdfToCsv", "description": "Convert a single SDF file to a CSV file and provide a download link.", "inputs": "sdf_file (str): Path to the SDF file.", "outputs": "str: A Markdown string with a link to the converted CSV file, or an error message."}
{"name": "scitooleval/ShowMol", "description": "Generate a molecule image from its SMILES representation and embed it directly in Markdown.", "inputs": "smiles (str): A SMILES representation of the molecule to be displayed.", "outputs": "str: A Markdown string with embedded molecule image, or an error message."}
{"name": "scitooleval/TypeAtomsInMolecule", "description": "Assigns EState types to each atom in a molecule based on its SMILES representation.", "inputs": "smiles (str): A SMILES representation of the molecule.", "outputs": "str: A Markdown formatted string describing the EState types of atoms in the molecule, or an error message."}
{"name": "scitooleval/CalculateEstateIndices", "description": "Calculate EState indices for each atom in a molecule based on its SMILES representation.", "inputs": "smiles (str): A SMILES representation of the molecule.", "outputs": "str: A Markdown formatted string describing the EState indices of atoms in the molecule, or an error message."}
{"name": "scitooleval/CalculateEstateVsa", "description": "Calculate EState VSA indices for a molecule based on its SMILES representation.", "inputs": "smiles (str): A SMILES representation of the molecule.", "outputs": "str: A Markdown formatted string describing the EState VSA indices of the molecule, or an error message."}
{"name": "scitooleval/GenerateEstateFingerprint", "description": "Generate the EState fingerprint for a molecule based on its SMILES representation.", "inputs": "smiles (str): A SMILES representation of the molecule.", "outputs": "str: A Markdown formatted string describing the EState fingerprint of the molecule, or an error message."}
{"name": "scitooleval/ExtractRotatableDihedralsFromSdf", "description": "Extract rotatable dihedrals from a molecule in an SDF file.", "inputs": "sdffile (str): The file path of the SDF file containing the molecule.", "outputs": "str: A Markdown formatted string listing the indices of atoms forming each \n             rotatable dihedral in the molecule, or an error message."}
{"name": "scitooleval/CalculateMolecularCenter", "description": "Calculate the geometric center of a molecule from an SDF file.", "inputs": "sdffile (str): The file path of the SDF file containing the molecule.", "outputs": "str: A Markdown formatted string describing the x, y, and z coordinates \n             of the molecular center, or an error message."}
{"name": "scitooleval/CalculateUsrcatScores", "description": "Calculate USRCAT scores and Tanimoto coefficients for molecules in an SDF file.", "inputs": "sdf_path (str): The file path of the SDF file containing the molecules.", "outputs": "str: A Markdown formatted string summarizing the USRCAT scores and Tanimoto \n             coefficients for molecule pairs, or an error message."}
{"name": "scitooleval/CalculateShapeSimilarity", "description": "Calculate shape similarity scores using USRCAT for a list of molecules defined by their SMILES.", "inputs": "smiles_list (list): A list of SMILES strings representing the molecules.", "outputs": "str: A Markdown formatted string summarizing the SMILES strings, their indices, and \n             the USRCAT scores for each pair of molecules, or an error message."}
{"name": "scitooleval/CalculatePmi", "description": "Calculate the normalized principal moments of inertia (NPR1 and NPR2) for a molecule.", "inputs": "smiles (str): A SMILES representation of the molecule.", "outputs": "str: A Markdown formatted string describing the NPR1 and NPR2 values of the molecule, or an error message."}
{"name": "scitooleval/CalculateDistanceMatrix", "description": "Calculate the distance matrix for a list of molecules based on their fingerprints.", "inputs": "smiles_list (list of str): A list of SMILES strings representing the molecules.", "outputs": "str: A Markdown formatted string representing the distance matrix, or an error message."}
{"name": "scitooleval/ClusterMolecules", "description": "Clusters molecules based on their fingerprints and returns the clustering results in Markdown format.", "inputs": "smiles_list (list of str): A list of SMILES strings representing the molecules.\t        metric (callable): A function to calculate the distance or similarity between fingerprints.\t        algorithm_id (int): Identifier for the clustering algorithm to be used.", "outputs": "str: A Markdown formatted string representing the clustering results, or an error message."}
{"name": "scitooleval/ProcessFingerprintMol", "description": "Process the molecular fingerprint generated by FingerprintMol function.", "inputs": "mol (rdkit.Chem.rdchem.Mol): The molecule object to fingerprint.\t        fingerprinter (function, optional): The fingerprinting function to use. Defaults to Chem.RDKFingerprint.", "outputs": "str: A Markdown formatted string representing the molecular fingerprint in binary or hexadecimal format."}
{"name": "scitooleval/FingerprintsFromSmiles", "description": "Generate fingerprints for a list of SMILES strings.", "inputs": "smiles_list (list of str): List of SMILES strings.\t        fingerprinter (function, optional): The fingerprinting function to use. Defaults to Chem.RDKFingerprint.", "outputs": "str: A Markdown formatted string representing the fingerprints of the molecules."}
{"name": "scitooleval/FoldFingerprintFromSmiles", "description": "Generate a fingerprint from a SMILES string, fold it using a provided function, and provide detailed information.", "inputs": "smiles (str): The SMILES string of the molecule.\t        tgtDensity (float, optional): The target density to achieve by folding. Defaults to 0.3.\t        minSize (int, optional): The minimum size of the fingerprint after folding. Defaults to 64.", "outputs": "str: A Markdown formatted string representing the original and folded fingerprints with additional details."}
{"name": "scitooleval/GetRdkFingerprintFromSmiles", "description": "Generate an RDKit fingerprint from a SMILES string using default parameters.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "str: A Markdown formatted string representing the RDKit fingerprint in binary format."}
{"name": "scitooleval/GetFraggleSimilarity", "description": "Calculate the Fraggle similarity between two molecules represented by SMILES strings.", "inputs": "smiles1 (str): The SMILES string of the first molecule (query molecule).\t        smiles2 (str): The SMILES string of the second molecule (reference molecule).\t        tverskyThresh (float, optional): Tversky threshold for similarity. Defaults to 0.8.", "outputs": "str: A Markdown formatted string representing the Fraggle similarity and the matching substructure."}
{"name": "scitooleval/GenerateFraggleFragments", "description": "Generate all possible Fraggle fragmentations for a molecule represented by a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "str: A Markdown formatted string representing the list of possible fragmentations."}
{"name": "scitooleval/CheckValidRingCut", "description": "Check if the molecule represented by a SMILES string is a valid ring cut.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "str: A message indicating whether the molecule is a valid ring cut or not."}
{"name": "scitooleval/BuildAtomPairFpFromSmiles", "description": "Generate an Atom Pair Fingerprint from a SMILES string and display the results in a readable format.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "str: A detailed message representing the Atom Pair Fingerprint."}
{"name": "scitooleval/BuildTorsionsFpFromSmiles", "description": "Generate a Torsions Fingerprint from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "str: A detailed message representing the Torsions Fingerprint."}
{"name": "scitooleval/BuildRdkitFpFromSmiles", "description": "Generate an RDKit fingerprint from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "str: A detailed message representing the RDKit fingerprint."}
{"name": "scitooleval/BuildPharm2DFpFromSmiles", "description": "Generate a Pharm2D fingerprint from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.\t        fdef_file (str, optional): Path to the feature definition file. If None, use RDKit default.", "outputs": "str: A detailed message representing the Pharm2D fingerprint."}
{"name": "scitooleval/BuildMorganFpFromSmiles", "description": "Generate a Morgan fingerprint from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "str: A detailed message representing the Morgan fingerprint."}
{"name": "scitooleval/BuildAvalonFpFromSmiles", "description": "Generate an Avalon fingerprint from a SMILES string.", "inputs": "smiles (str): The SMILES string of the molecule.", "outputs": "str: A detailed message representing the Avalon fingerprint."}
{"name": "scitooleval/ConvertSmilesToInchi", "description": "Converts a SMILES string to its corresponding InChI string.", "inputs": "smiles (str): A SMILES representation of the molecule.", "outputs": "str: A Markdown formatted string describing the InChI representation of the molecule.\n             If an error occurs during conversion, an error message is returned."}
{"name": "scitooleval/GenerateMolKeyFromSmiles", "description": "Generates a molecular key for a given molecule represented by a SMILES string.", "inputs": "smiles (str): A SMILES representation of the molecule.", "outputs": "str: A Markdown formatted string describing the molecular key.\n             If an error occurs during the process, an error message is returned."}
{"name": "scitooleval/GetStereoCodeFromSmiles", "description": "Generates the stereo code for a given molecule represented by a SMILES string.", "inputs": "smiles (str): A SMILES representation of the molecule.", "outputs": "str: A Markdown formatted string describing the stereo code of the molecule.\n             If an error occurs during the process, an error message is returned."}
{"name": "scitooleval/GetPatternFingerprint", "description": "This tool is used to generate a pattern fingerprint for a molecule. The pattern fingerprint is a bit vector that encodes the presence or absence of particular substructures in the molecule. The substructures are defined by SMARTS patterns. The SMARTS patterns are converted to molecular fingerprints and then combined to generate the pattern fingerprint.", "inputs": "smiles (str): A SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the fingerprint resultsï¼Œ or an error message."}
{"name": "scitooleval/CanSerialize", "description": "This tool is used to check if a TautomerQuery object can be serialized.", "inputs": "smiles (str): a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the serialization result, or an error message."}
{"name": "scitooleval/AssignCIPLabels", "description": "This tool is used to assign CIP labels to the atoms in a molecule. The CIP labels are used to describe the stereochemistry of the molecule. The labels are assigned based on the 3D structure of the molecule.", "inputs": "smiles (str): a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the CIP labels, or an error message."}
{"name": "scitooleval/Enumerate", "description": "The rdkit.Chem.rdMolEnumerator.Enumerate function is used to perform enumeration on a given molecule and returns a MolBundle object containing multiple molecules generated during the enumeration process.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the enumeration results, or an error message.smiles = smiles.replace(\" \", \"\").replace(\"\n\", \"\").replace(\"'\", \"\").replace(\"\"\", \"\").replace('.), '"}
{"name": "scitooleval/Deprotect", "description": "The rdkit.Chem.rdDeprotect.Deprotect function removes protecting groups from a molecule, returning the deprotected version.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the deprotected SMILES, or an error message."}
{"name": "scitooleval/CondenseAbbreviationSubstanceGroups", "description": "This tool finds and replaces abbreviation substance groups in a molecule, resulting in a compressed version of the molecule where the abbreviations are expanded.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the condensation results, or an error message.smiles = smiles.replace(\" \", \"\").replace(\"\n\", \"\").replace(\"'\", \"\").replace(\"\"\", \"\").replace('.), '"}
{"name": "scitooleval/SlnToSmiles", "description": "This tool is used to convert a SLN string to a SMILES string. Input SMILES directly without any other characters.", "inputs": "sln: a SLN string. Input SLN directly without any other characters.", "outputs": "str: A markdown string wtih the SMILES, or an error message."}
{"name": "scitooleval/CreateShingling", "description": "This tool is used to create a shingling for a molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the shingling, or an error message."}
{"name": "scitooleval/EncodeMolecule", "description": "This tool creates an MHFP vector from a molecule  using MHFP encoder, capturing structural information of the molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the MinHashed Fingerprints."}
{"name": "scitooleval/EncodeSECFP", "description": "This tool creates an SECFP vector from a molecule using SECFP encoder, capturing structural information of the molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the SECFP vector, or an error message."}
{"name": "scitooleval/GetBCUT", "description": "This tool computes the 2D BCUT descriptors for a given molecule, representing mass, Gasteiger charge, Crippen logP, and Crippen MR values.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the BCUT2D descriptors, or an error message."}
{"name": "scitooleval/GetAutocorrelation2D", "description": "This tool computes the 2D autocorrelation descriptors for a given molecule, capturing the spatial arrangement of atoms in the molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the 2D autocorrelation descriptors vector, or an error message."}
{"name": "scitooleval/GetAutocorrelation3D", "description": "This tool computes the 3D autocorrelation descriptors for a given molecule, capturing the spatial arrangement of atoms in the molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the 3D autocorrelation descriptors vector, or an error message."}
{"name": "scitooleval/GetAsphericity", "description": "This tool calculates the asphericity descriptor for a molecule, which measures how much the molecule deviates from a perfectly spherical shape.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih asphericity descripto(a float value), or an error message."}
{"name": "scitooleval/GetChi0n", "description": "This tool calculates the chi^0 (chi-zero) cluster index, which represents a topological descriptor related to molecular branching.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih chi^0 (chi-zero) cluster index(a float value), or an error message."}
{"name": "scitooleval/GetChi0v", "description": "This function calculates the Chi^0v (Chi-zero-v) valence molecular graph index for a molecule, which is used to describe the topology of the molecule. It returns a float value.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih chi^0 (chi-zero) cluster index(a float value), or an error message."}
{"name": "scitooleval/GetChi1n", "description": "This tool calculates the chi^1 (chi-one) cluster index, which represents a topological descriptor related to molecular branching.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih chi^1 (chi-one) cluster index(a float value), or an error message."}
{"name": "scitooleval/GetChi1v", "description": "This function calculates the Chi^1v (Chi-one-v) valence molecular graph index for a molecule, which is used to describe the topology of the molecule. It returns a float value.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih chi^1 (chi-one) cluster index(a float value), or an error message."}
{"name": "scitooleval/GetChi2n", "description": "This tool calculates the chi^2 (chi-two) cluster index, which represents a topological descriptor related to molecular branching.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih chi^2 (chi-two) cluster index(a float value), or an error message."}
{"name": "scitooleval/GetChi2v", "description": "This function calculates the Chi^2v (Chi-two-v) valence molecular graph index for a molecule, which is used to describe the topology of the molecule. It returns a float value.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih chi^2 (chi-two) cluster index(a float value), or an error message."}
{"name": "scitooleval/GetCoulombMat", "description": "This tool calculates the Coulomb matrix for a molecule, which represents the electrostatic interactions between atoms in the molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the Coulomb matrix, or an error message."}
{"name": "scitooleval/GetCrippenDescriptors", "description": "This function calculates the Wildman-Crippen logP and MR (molecular refractivity) values for a given molecule in RDKit.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the Wildman-Crippen logp and mr values, or an error message."}
{"name": "scitooleval/GetEEMCharges", "description": "This function computes the EEM (Electronegativity Equalization Method) atomic partial charges for a given molecule using its atomic properties.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih a list of partial charges assigned to each atom in the molecule, or an error message."}
{"name": "scitooleval/GetEccentricity", "description": "This function calculates the eccentricity of a molecule, which is a measure of its shape.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the eccentricity value(a float value), or an error message."}
{"name": "scitooleval/GetExactMolceularWeight", "description": "This function calculates the exact molecular weight of a molecule, which is the sum of the atomic weights of all atoms in the molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the exact molecular weight(a float value), or an error message."}
{"name": "scitooleval/GetFractionCSP3", "description": "This function calculates the fraction of sp3-hybridized carbon atoms in a molecule, which is a measure of its shape.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the fraction of sp3-hybridized carbon atoms(a float value), or an error message."}
{"name": "scitooleval/GetGETAWAY", "description": "This function calculates the GETAWAY descriptors for a molecule, which capture the shape and size of the molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the GETAWAY descriptors, or an error message."}
{"name": "scitooleval/GetHallKierAlpha", "description": "This function calculates the Hall-Kier alpha index for a molecule, which is a measure of its shape.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the Hall-Kier alpha index(a float value), or an error message."}
{"name": "scitooleval/GetInertialShapeFactor", "description": "This function calculates the Inertial Shape Factor of a molecule, which is a measure of its shape. The Inertial Shape Factor ranges from 0 to 1, where values closer to 1 indicate a more spherical shape and values closer to 0 indicate a more linear shape.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the inertial shape factor(a float value), or an error message."}
{"name": "scitooleval/GetKappa1", "description": "This function computes the Kappa1 (Îº1) value of a molecule, which is a topological descriptor representing its shape complexity or branching degree. The Kappa1 value is a floating-point number calculated based on the molecular graph topology.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the Kappa1 value(a float value), or an error message."}
{"name": "scitooleval/GetKappa2", "description": "This function computes the Kappa2 (Îº2) value of a molecule, which is a topological descriptor representing its shape complexity or branching degree. The Kappa2 value is a floating-point number calculated based on the molecular graph topology.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the Kappa2 value(a float value), or an error message."}
{"name": "scitooleval/GetKappa3", "description": "This function computes the Kappa3 (Îº3) value of a molecule, which is a topological descriptor representing its shape complexity or branching degree. The Kappa3 value is a floating-point number calculated based on the molecular graph topology.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the Kappa3 value(a float value), or an error message."}
{"name": "scitooleval/GetLabuteASA", "description": "This function calculates the Labute accessible surface area (ASA) value for a molecule, which is a measure of the solvent-accessible surface area of the molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the Labute ASA value(a float value), or an error message."}
{"name": "scitooleval/GetMolFormula", "description": "This function calculates the molecular formula of a molecule, which is a string representing the number and type of atoms in the molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the molecular formula, or an error message."}
{"name": "scitooleval/GetMORSE", "description": "This tool calculates the Molecule Representation of Structures based on Electron diffraction (MORSE) descriptors for a given molecule. MORSE descriptors provide a representation of molecular structures based on electron diffraction concepts.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih a list containing the calculated MORSE descriptors, or an error message."}
{"name": "scitooleval/GetNPR1", "description": "This function calculates the NPR1 (Normalized Principal Moments Ratio) descriptor for a molecule, which serves as a descriptor for the distribution of charges within the molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the NPR1 value(a float value), or an error message."}
{"name": "scitooleval/GetNPR2", "description": "This function calculates the NPR2 (Normalized Principal Moments Ratio) descriptor for a molecule, which serves as a descriptor for the distribution of charges within the molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the NPR2 value(a float value), or an error message."}
{"name": "scitooleval/GetAliphaticCarbocyclesNum", "description": "This function calculates the number of aliphatic carbocycles in a molecule. Aliphatic carbocycles are cyclic structures that contain at least one non-aromatic bond.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the count of such carbocycles, or an error message."}
{"name": "scitooleval/GetAliphaticHeterocyclesNum", "description": "This function calculates the number of aliphatic heterocycles in a molecule. Aliphatic heterocycles are cyclic structures that contain at least one non-aromatic bond and at least one heteroatom (an atom other than carbon).", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the count of such aliphatic heterocycles, or an error message."}
{"name": "scitooleval/GetAliphaticRingsNum", "description": "This tool calculates the number of aliphatic rings in a molecule. Aliphatic rings are ring structures that contain at least one non-aromatic bond.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the count of such aliphatic rings, or an error message."}
{"name": "scitooleval/GetAmideBondsNum", "description": "This function calculates the number of amide bonds in a molecule. Amide bonds are chemical bonds formed between a carbonyl group and an amino group.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the count of such amide bonds, or an error message."}
{"name": "scitooleval/GetAromaticCarbocyclesNum", "description": "This function calculates the number of aromatic carbocycles in a molecule. Aromatic carbocycles are cyclic structures composed entirely of carbon atoms with alternating single and double bonds (aromaticity) in at least one ring.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the count of such aromatic carbocycles, or an error message."}
{"name": "scitooleval/GetAromaticHeterocyclesNum", "description": "This function calculates the number of aromatic heterocycles in a molecule. Aromatic heterocycles are cyclic structures that contain at least one heteroatom (an atom other than carbon) and exhibit aromaticity. es.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the count of such aromatic heterocycl, or an error message."}
{"name": "scitooleval/GetAromaticRingsNum", "description": "This tool calculates the number of aromatic rings in a molecule. Aromatic rings are cyclic structures composed of alternating single and double bonds (aromaticity) and exhibit stability due to delocalization of electrons.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the count of such aromatic rings, or an error message."}
{"name": "scitooleval/GetAtomStereoCentersNum", "description": "This function calculates the number of atom stereo centers in a molecule. Atom stereo centers are atoms that are chiral centers and are not part of a ring structure.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the total number of atomic stereocenters, or an error message."}
{"name": "scitooleval/GetAtomsNum", "description": "This function calculates the number of atoms in a molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the total number of atoms in the molecule, or an error message."}
{"name": "scitooleval/GetBridgeheadAtomsNum", "description": "This function calculates the number of bridgehead atoms in a molecule. Bridgehead atoms are atoms that are part of a bridged ring structure.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the total number of bridgehead atoms, or an error message."}
{"name": "scitooleval/GetHBANum", "description": "This function calculates the number of hydrogen bond acceptors (HBA) in a molecule. Hydrogen bond acceptors are atoms capable of forming hydrogen bonds by accepting a hydrogen atom.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih integer representing the count of such hydrogen bond acceptors, or an error message."}
{"name": "scitooleval/GetHBDNum", "description": "This function calculates the number of hydrogen bond donors (HBD) in a molecule. Hydrogen bond donors are atoms capable of forming hydrogen bonds by donating a hydrogen atom.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih integer representing the count of hydrogen bond donors, or an error message."}
{"name": "scitooleval/GetHeavyAtomsNum", "description": "This tool calculates the number of heavy atoms in a molecule. Heavy atoms are atoms other than hydrogen.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih integer representing the number of heavy atoms for a molecule, or an error message."}
{"name": "scitooleval/GetHeteroatomsNum", "description": "This tool calculates the number of heteroatoms in a molecule. Heteroatoms are atoms other than carbon and hydrogen.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the total number of heteroatoms in the molecule, or an error message."}
{"name": "scitooleval/GetHeterocyclesNum", "description": "This tool calculates the number of heterocycles in a molecule. Heterocycles are cyclic structures that contain at least one heteroatom (an atom other than carbon).", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the count of such heterocycles, or an error message."}
{"name": "scitooleval/GetLipinskiHBANum", "description": "This tool calculates the number of Lipinski hydrogen bond acceptors (HBA) in a molecule, which is a measure used in drug-likeness evaluation according to Lipinski's rule of five. Lipinski's rule suggests that molecules with no more than five hydrogen bond acceptors tend to have better oral bioavailability.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the number of Lipinski H-bond acceptors, or an error message."}
{"name": "scitooleval/GetLipinskiHBDNum", "description": "This tool calculates the number of Lipinski hydrogen bond donors (HBD) in a molecule, which is a measure used in drug-likeness evaluation according to Lipinski's rule of five.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the number of Lipinski H-bond donors, or an error message."}
{"name": "scitooleval/GetRingsNum", "description": "This tool calculates the number of rings in a molecule.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the total number of rings in the molecule, or an error message."}
{"name": "scitooleval/GetRotatableBondsNum", "description": "This tool calculates the number of rotatable bonds in a molecule. Rotatable bonds are single bonds that are not part of a ring structure and are not terminal (i.e., not connected to a hydrogen atom).", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the total number of rotatable bonds in the molecule, or an error message."}
{"name": "scitooleval/GetSaturatedCarbocyclesNum", "description": "This function calculates the number of saturated carbocycles in a molecule. Saturated carbocycles are cyclic structures composed entirely of carbon atoms with single bonds (no double bonds).", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the count of such saturated carbocycles, or an error message."}
{"name": "scitooleval/GetSaturatedHeterocyclesNum", "description": "This function calculates the number of saturated heterocycles in a molecule. Saturated heterocycles are cyclic structures that contain at least one heteroatom (an atom other than carbon) and are composed entirely of single bonds (no double bonds).", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the count of such saturated heterocycles, or an error message."}
{"name": "scitooleval/GetSaturatedRingsNum", "description": "This tool calculates the number of saturated rings in a molecule. Saturated rings are ring structures composed entirely of single bonds (no double bonds).", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the count of such saturated rings, or an error message."}
{"name": "scitooleval/GetSpiroAtomsNum", "description": "This function calculates the number of spiro atoms in a molecule. Spiro atoms are atoms that are part of a spiro ring structure, which consists of two rings that share a single atom.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the total number of spiro atoms, or an error message."}
{"name": "scitooleval/GetUnspecifiedAtomStereoCentersNum", "description": "This tool calculates the number of unspecified atomic stereocenters in a molecule. Unspecified atomic stereocenters are atoms that have the potential to be stereocenters but lack explicit specification of their stereochemistry.", "inputs": "smiles: a SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih an integer representing the total number of unspecified atom stereo centers, or an error message."}
{"name": "scitooleval/GenerateRDKFingerprintsFromCSV", "description": "This tool calculates the number of unspecified atomic stereocenters in a molecule. Unspecified atomic stereocenters are atoms that have the potential to be stereocenters but lack explicit specification of their stereochemistry.", "inputs": "csv_name (str)", "outputs": ""}
{"name": "scitooleval/GenerateMorganfingerprintsFromCSV", "description": "Generate morgan fingerprints for the SMILES strings in a CSV file and save to a new CSV file.", "inputs": "csv_name: file name of the input CSV containing SMILES strings.", "outputs": "str: Message indicating the completion of processing and the path to the output CSV file.\n    \n    Note: Your input only needs to contain the file name, without any additional information. For example, your input should be \"filename.csv\" instead of \"csv_name='filename.csv'\""}
{"name": "scitooleval/GenerateElectricalDescriptorsFromCSV", "description": "Generate electrical RDKit descriptors for the SMILES strings in a CSV file and save to a new CSV file.", "inputs": "input_csv: Path to the input CSV file containing SMILES strings.\t        output_csv: Path where the output CSV file will be saved.", "outputs": "str: Message indicating the completion of processing and the path to the output CSV file."}
{"name": "scitooleval/MLPClassifier", "description": "General MLP classifier function that predicts based on processed feature files.", "inputs": "csv_name: The name of the test data feature file for prediction.\t                  For example: 'chemsmiles_test_electrical_descriptors.csv' or 'demo_test_Morgan_fingerprints.csv'.", "outputs": "str: A string describing the accuracy of the model on the training set and test set."}
{"name": "scitooleval/AdaBoostClassifier", "description": "General AdaBoost classifier function that predicts based on processed feature files.", "inputs": "csv_name: The name of the test data feature file for prediction.\t                  For example: 'chemsmiles_test_electrical_descriptors.csv' or 'demo_test_Morgan_fingerprints.csv'.", "outputs": "str: A string containing the model's accuracy on the training set and test set, in markdown format."}
{"name": "scitooleval/RandomForestClassifier", "description": "General Random Forest classifier function that predicts based on processed feature files.", "inputs": "csv_name: The name of the test data feature file for prediction.\t                  For example: 'chemsmiles_test_electrical_descriptors.csv' or 'demo_test_Morgan_fingerprints.csv'.", "outputs": "str: A string containing the model's accuracy on the training set and test set, in markdown format."}
{"name": "scitooleval/RunSuZuKiReactionExperiment", "description": "This function performs an automated Suzuki Reaction experiment by iteratively optimizing experimental parameters using Bayesian optimization.", "inputs": "num_iterations (int): Number of iterations for Bayesian optimization. Default is 5.", "outputs": "str: A markdown string with the results of the experiment."}
{"name": "scitooleval/AssignOxidationNumbers", "description": "Adds the oxidation number/state to the atoms of a molecule as property OxidationNumber on each atom.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string wtih smiles of molecular, or an error message."}
{"name": "scitooleval/CalculatePBF", "description": "This tool calculates the PBF (plane of best fit) descriptor for a given molecule. PBF is a molecular descriptor that characterizes the flatness or planarity of a molecule. It is calculated based on the arrangement of atoms in 3D space.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the PBF of the molecule(a float value), or an error message."}
{"name": "scitooleval/CalculatePMI1", "description": "This tool calculates the first principal moment of inertia (PMI1) for a given molecule. PMI1 is a molecular descriptor used to characterize the shape and spatial distribution of atoms in a molecule. PMI1 measures the asymmetry or elongation of a molecule along its principal axis. It provides information about the molecule's overall shape and can be useful in various computational chemistry and drug design applications.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the PMI1 of the molecule(a float value), or an error message."}
{"name": "scitooleval/CalculatePMI2", "description": "This tool is designed to compute the PMI2 (Partial Molecular Information 2) value of a molecule, which serves as a descriptor indicating the shape and structure of the molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the PMI2 of the molecule(a float value), or an error message."}
{"name": "scitooleval/CalculatePMI3", "description": "This tool is designed to compute the PMI3 (Partial Molecular Information 3) value of a molecule, which serves as a descriptor characterizing the shape and structure of the molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the PMI3 of the molecule(a float value), or an error message."}
{"name": "scitooleval/CalculatePhi", "description": "This tool calculates the Phi (Ï†) angle of a molecule, which is a torsional angle describing the rotation about a single bond.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the Phi angle of the molecule(a float value), or an error message."}
{"name": "scitooleval/CalculateRDF", "description": "This tool calculates the RDF (Radial Distribution Function) descriptor for a given molecule. RDF is a molecular descriptor that characterizes the distribution of atoms in 3D space. It is calculated based on the distances between pairs of atoms in a molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the RDF of the molecule(a list), or an error message."}
{"name": "scitooleval/CalculateRadiusOfGyration", "description": "This tool is designed to compute the radius of gyration for a given molecule, providing insights into its overall shape and compactness.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the computed radius of gyration for the specified molecule(a float value), or an error message."}
{"name": "scitooleval/CalculateSpherocityIndex", "description": "This function calculates the sphericity index for a given molecule. Sphericity index is a measure of how close the shape of a molecule resembles a perfect sphere.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the spherocity index of the molecule(a float value), or an error message."}
{"name": "scitooleval/CalculateTPSA", "description": "This tool calculates the TPSA (Topological Polar Surface Area) descriptor for a given molecule, which is a measure of the accessible polar surface area in a molecule. TPSA is a molecular descriptor that characterizes the polarity and hydrophilicity of a molecule. It is calculated based on the distribution of polar atoms and bonds in a molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the TPSA of the molecule(a float value), or an error message."}
{"name": "scitooleval/CalculateWHIM", "description": "This tool calculates the WHIM (Weighted Holistic Invariant Molecular) descriptor for a given molecule. WHIM is a molecular descriptor that characterizes the 3D shape and electronic properties of a molecule. It is calculated based on the distribution of atomic properties and their spatial arrangement in a molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the WHIM of the molecule(a list of float values), or an error message."}
{"name": "scitooleval/CustomPropertyVSA", "description": "This function computes a custom property for a given molecule using the Van der Waals Surface Area (VSA) method, based on user-defined parameters.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the VSA of the molecule(a list of float values), or an error message."}
{"name": "scitooleval/GetAtomFeature", "description": "This function computes a set of atom features for a given molecule, including atomic number, valence, and hybridization.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the atom features of the molecule(a list of dictionaries), or an error message."}
{"name": "scitooleval/GetAtomPairFingerprint", "description": "This function computes the atom pair for a given molecule. The atom pair fingerprint is a molecular descriptor that characterizes the presence of pairs of atoms in a molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the atom pair fingerprint of the molecule(a list of int values), or an error message."}
{"name": "scitooleval/GetConnectivityInvariants", "description": "This tool computes connectivity invariants, similar to ECFP (Extended Connectivity Fingerprints), for a given molecule. These invariants serve as a fingerprint representation of the molecule's structural connectivity, aiding in tasks such as similarity comparison and molecular structure representation.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the connectivity invariants of the molecule(a list of int values), or an error message."}
{"name": "scitooleval/GetFeatureInvariants", "description": "This tool computes feature invariants, similar to FCFP (Feature Centroid Fingerprints), for a given molecule. These invariants provide a fingerprint representation of the molecule's features, aiding in tasks such as similarity comparison and molecular structure analysis.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the feature invariants of the molecule(a list of int), or an error message."}
{"name": "scitooleval/GetAtomPairCode", "description": "This function computes atom pair code (hash) for each atom in a molecular. The atom pair code is a molecular descriptor that characterizes the presence of pairs of atoms in a molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the atom pair code (hash) for each atom(a list of int values), or an error message."}
{"name": "scitooleval/GetHybridization", "description": "This function computes the hybridization of each atom in a molecule. Hybridization is a property of an atom that characterizes its electron configuration and bonding behavior.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the hybridization of each atom(a list of int values), or an error message."}
{"name": "scitooleval/GetRingSystems", "description": "This function computes the ring systems of a molecule. A ring system is a set of rings that are connected to each other through shared atoms or bonds.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the ring systems of the molecule(a list of lists), or an error message."}
{"name": "scitooleval/GetMACCSKeysFingerprint", "description": "This function computes the Molecular ACCess System keys fingerprint for a given molecule. The Molecular ACCess System keys fingerprint is a molecular descriptor that characterizes the presence of specific structural features in a molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the Molecular ACCess System keys fingerprint of the molecule(a list of int values), or an error message."}
{"name": "scitooleval/GetMorganFingerprint", "description": "This tool computes the Morgan fingerprint for a given molecule. The Morgan fingerprint is a widely used method to encode molecular structure information. It captures the local chemical environments around each atom up to a specified radius.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the Morgan fingerprint of the molecule(a list of int values), or an error message."}
{"name": "scitooleval/GetTopologicalTorsionFingerprint", "description": "This tool computes the topological torsion fingerprint for a given molecule. The topological torsion fingerprint is a molecular descriptor that characterizes the presence of specific structural features in a molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the topological torsion fingerprint of the molecule(a list of int values), or an error message."}
{"name": "scitooleval/GetUSR", "description": "The tool computes the USR (Ultrafast Shape Recognition) descriptor for a given conformer of a molecule and returns it as a list.The USR descriptor is a numerical representation of the shape of a molecule. It captures the 3D shape of a molecule in a compact form, making it particularly useful for comparing molecular shapes efficiently.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the USR descriptor of the molecule(a list), or an error message."}
{"name": "scitooleval/GetUSRCAT", "description": "This function is designed to compute the USRCAT (Ultrafast Shape Recognition with Coordinate Asymmetric Torsions) descriptor for a specified conformer of a molecule. The USRCAT descriptor is a compact representation of the molecular shape, which is useful for various cheminformatics applications such as similarity searching, clustering, and virtual screening.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the USRCAT descriptor of the molecule(a list), or an error message."}
{"name": "scitooleval/AddHydrogens", "description": "This function is used to add hydrogen atoms to the molecular graph of a molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the molecule with added hydrogens, or an error message."}
{"name": "scitooleval/AddWavyBondsForStereoAny", "description": "This tool adds wavy bonds around double bonds with STEREOANY stereochemistry.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the molecule with added wava bonds, or an error message."}
{"name": "scitooleval/AssignAtomChiralTagsFromStructure", "description": "This tool sets chiral tags for atoms of the molecular based on the molParity property. This ensures proper definition of the molecule's stereochemistry for further analysis or visualization.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the modified molecule, or an error message."}
{"name": "scitooleval/AssignRadicals", "description": "This tool is used to assign radical counts to atoms within a molecule. It takes a molecule SMILES as input and modifies it, assigning appropriate numbers of radicals to each atom within the molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the modified molecule, or an error message."}
{"name": "scitooleval/AssignStereoChemistry", "description": "This tool is used for assigning Cahnâ€“Ingoldâ€“Prelog (CIP) stereochemistry to atoms (R/S) and double bonds (Z/E) within a molecule. Chiral atoms will have a property _CIPCode indicating their chiral code.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the modified molecule, or an error message."}
{"name": "scitooleval/GetAdjacencyMatrix", "description": "This tool is used to obtain the adjacency matrix of a molecule. The adjacency matrix is a mathematical representation of a molecule where rows and columns correspond to atoms, and matrix elements represent whether pairs of atoms are adjacent (connected by a bond) or not.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the adjacency matrix of the molecule, or an error message."}
{"name": "scitooleval/GetAllowNontetrahedralChirality", "description": "This tool is used to determine whether recognition of non-tetrahedral chirality from 3D structures is enabled or not.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string indicating whether recognition of non-tetrahedral chirality from 3D structures is enabled, or an error message."}
{"name": "scitooleval/GetDistanceMatrix", "description": "The tool computes the topological distance matrix for a given molecule. This matrix provides information about the shortest path between pairs of atoms in the molecular graph, essentially indicating how many bonds need to be traversed to move from one atom to another.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the distance matrix of the molecule, or an error message."}
{"name": "scitooleval/GetFormalCharge", "description": "This tool is utilized to determine the total formal charge of a given molecule. Formal charge is a concept in chemistry that describes the net charge of an atom or a molecule, considering the redistribution of electrons based on electronegativity differences.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the formal charge of the molecule, or an error message."}
{"name": "scitooleval/GetFormalChargeOfAtoms", "description": "This tool is utilized to determine the formal charge of each atom in a given molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the formal charge of each atom in the molecule, or an error message."}
{"name": "scitooleval/GetMolFrags", "description": "This tool identifies disconnected fragments within a molecule and returns them as atom identifiers or molecules. It allows for flexible representation and manipulation of the fragments in further analysis.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with a tuple containing the atom identifiers or molecules for each disconnected fragment within the molecule, or an error message."}
{"name": "scitooleval/GetUseLegacyStereoPerception", "description": "This tool identifies disconnected fragments within a molecule and returns them as atom identifiers or molecules. It allows for flexible representation and manipulation of the fragments in further analysis.", "inputs": "smiles (str)", "outputs": ""}
{"name": "scitooleval/HapticBondsToDative", "description": "This tool is used to convert a molecule that represents haptic bonds using a dummy atom with a dative bond to a metal atom into a molecule with explicit dative bonds from the atoms of the haptic group to the metal atom.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the modified molecule, or an error message."}
{"name": "scitooleval/HasQueryHs", "description": "This tool is used to check if a molecule contains query H (hydrogen) atoms. Query hydrogens are special types of hydrogen atoms that are used to represent specific chemical environments or constraints in a molecule.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string indicating whether the molecule contains query hydrogens, or an error message."}
{"name": "scitooleval/Kekulize", "description": "This tool is used to perform Kekulization on a molecule. Kekulization is the process of converting aromatic bonds in a molecule to alternating single and double bonds, following the KekulÃ© structure representation.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the kekulized molecule, or an error message."}
{"name": "scitooleval/MergeQueryHs", "description": "This tool is used to merge hydrogen atoms into their neighboring atoms as query atoms. This function is typically used to modify molecules by replacing explicit hydrogen atoms with query atoms, allowing for more flexible substructure searching or atom mapping.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the modified molecule, or an error message."}
{"name": "scitooleval/MurckoDecompose", "description": "This tool is used to perform a Murcko decomposition on a molecule and return the scaffold. The Murcko scaffold represents the core structure of a molecule by removing side chains and retaining the ring system.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the core scaffold, or an error message."}
{"name": "scitooleval/RemoveHydrogens", "description": "This tool is used to remove hydrogen atoms from a molecule's graph. This function is typically used to simplify molecular representations for further analysis or visualization.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the modified molecule, or an error message."}
{"name": "scitooleval/RemoveStereochemistry", "description": "This tool is used to remove all stereochemistry information from a molecule. Stereochemistry information in a molecule refers to the spatial arrangement of atoms or groups around a stereocenter or a double bond.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the modified molecule, or an error message."}
{"name": "scitooleval/SetAromaticity", "description": "This tool is used to perform aromaticity perception on a molecule, which means determining the aromaticity of atoms and bonds in the molecule. Aromaticity is a chemical property that describes the stability and reactivity of certain ring structures in organic molecules.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the modified molecule, or an error message."}
{"name": "scitooleval/SetBondStereoFromDirections", "description": "This tool is used to set the cis/trans stereochemistry on double bonds based on the directions of neighboring bonds.", "inputs": "smiles: a SMILES string. Please Input SMILES directly without any other charactersã€‚", "outputs": "str: A markdown string with the SMILES of the modified molecule, or an error message."}
{"name": "scitooleval/DetermineBondOrders", "description": "The tool is used to determine the bond orders between atoms in a molecule based on their atomic coordinates. It assigns the connectivity information to the molecule by disregarding pre-existing bonds. This function is useful for inferring the chemical bonds in a molecule when the bond information is not already available or needs to be updated based on the 3D structure of the molecule.", "inputs": "smiles (str): A SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the results."}
{"name": "scitooleval/DetermineBonds", "description": "The tool is used to determine the bond orders between atoms in a molecule based on their atomic coordinates. It assigns the connectivity information to the molecule by disregarding pre-existing bonds. This function is useful for inferring the chemical bonds in a molecule when the bond information is not already available or needs to be updated based on the 3D structure of the molecule.", "inputs": "smiles (str): A SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the results."}
{"name": "scitooleval/IsSubstructof", "description": "This tool is used to check if a molecule(target) is a substructure of another molecule(template). It returns true if the molecule is a substructure of the other molecule and false otherwise. The substructure search is performed by matching the SMARTS pattern of the query molecule to the target molecule.", "inputs": "target_template (str): Two SMILES strings separated by a '.'. The first SMILES string is the target molecule, and the second SMILES string is the template molecule.\t                                Input SMILES directly without any other characters like CR(C)C(=O)O.CC(=O)O.", "outputs": "str: A markdown string wtih the results, or an error message."}
{"name": "scitooleval/GetTemplateMolecule", "description": "This tool is used to get the template molecule from a TautomerQuery object.", "inputs": "smiles (str): A SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the template smiles, or an error message."}
{"name": "scitooleval/GetTautomers", "description": "This tool obtains all possible tautomers of a TautomerQuery object. Tautomers are molecules that have the same atomic composition but differ in the connectivity of atoms. Retrieving all possible tautomers can help in understanding and analyzing changes in chemical reactions and molecular conformations.", "inputs": "template_smiles (str): A SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the number of tautomers and tautomer SMILES, or an error message."}
{"name": "scitooleval/GetModifiedAtoms", "description": "This tool is used to get the modified atoms of a TautomerQuery object. Modified atoms are atoms that have changed their connectivity in the tautomerization process.", "inputs": "smiles (str): A SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the modified atoms, or an error message."}
{"name": "scitooleval/GetModifiedBonds", "description": "This tool is used to get the modified bonds of a TautomerQuery object. Modified bonds are bonds that have changed their connectivity in the tautomerization process.", "inputs": "smiles (str): A SMILES string. Input SMILES directly without any other characters.", "outputs": "str: A markdown string wtih the modified bonds, or an error message."}
{"name": "scitooleval/GetSubstructMatches", "description": "This tool is to search for substructures in a given target molecule that match the tautomer query.", "inputs": "smiles_pair (str): Two SMILES strings separated by a '.'. The first SMILES string is the target molecule, and the second SMILES string is the template molecule.", "outputs": "str: A markdown string wtih the substruct matches, or an error message."}
